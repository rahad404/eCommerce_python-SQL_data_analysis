

-- BASIC

-- 1. List all unique cities where customers are located.
SELECT DISTINCT geolocation_city FROM geolocation;


-- 2. Count the number of orders placed in 2017.
SELECT COUNT(order_id) FROM orders
WHERE order_purchase_timestamp = 2017;


-- 3. Find the total sales per category.
SELECT products.product_category category, ROUND(SUM(payments.payment_value),2) sales
FROM products JOIN order_items
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
GROUP BY category;


-- 4. Calculate the percentage of orders that were paid in installments.
SELECT sum(CASE WHEN payment_installments>1 THEN 1 ELSE 0 END)/count(*)*100
FROM payments;


-- 5. Count the number of customers from each state.
SELECT customer_state, count(customer_id)
FROM customers
GROUP BY customer_state;



-- INTERMEDIATE

-- 1. Calculate the number of orders per month in 2018.
SELECT 
    MONTH(order_purchase_timestamp) AS `month`, 
    COUNT(order_id) AS `order`
FROM 
    orders
WHERE 
    YEAR(order_purchase_timestamp) = 2018
GROUP BY 
    MONTH(order_purchase_timestamp);


-- 2. Find the average number of products per order, grouped by customer city.
SELECT c.customer_city, AVG(oi.prod_count) as avg_prod_per_order
from orders o JOIN customers c 
ON o.customer_id = c.customer_id 
JOIN
    (SELECT order_id, count(*) as prod_count
    from order_items
    GROUP BY order_id) oi ON o.order_id = oi.order_id
GROUP BY c.customer_city;


-- 3. Calculate the percentage of total revenue contributed by each product category.
SELECT products.product_category category,
    round((sum(payments.payment_value)/(SELECT sum(payment_value) FROM payments))*100,2) percentage
FROM products JOIN order_items ON products.product_id=order_items.product_id
JOIN payments ON payments.order_id=order_items.order_id
GROUP BY category


-- 4. Identify the correlation between product price and the number of times a product has been purchased.

    SELECT p.product_id, oi.price, count(oi.order_id) p_count
    FROM products p JOIN order_items oi
    on p.product_id = oi.product_id
    GROUP BY p.product_id, oi.price;


-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT s.seller_id seller_id, round(sum(p.payment_value),2) total_revenue,
RANK() OVER (ORDER BY sum(p.payment_value) DESC) as revenue_rank
FROM sellers s JOIN order_items oi
on s.seller_id = oi.seller_id JOIN payments p
on oi.order_id = p.order_id
GROUP BY seller_id ORDER BY total_revenue DESC;



-- Advance 

-- 1. Calculate the moving average of order values for each customer over their order history.
SELECT x.customer_id, x.date, x.price, 
ROUND(avg(x.price) OVER(PARTITION BY x.customer_id ORDER BY x.date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2) moving_avg
FROM
    (select c.customer_id customer_id , o.order_id order_id, o.order_purchase_timestamp date, oi.price price
    FROM customers c JOIN orders o ON c.customer_id = o.customer_id 
    JOIN order_items oi ON o.order_id = oi.order_id 
    ) x

ORDER BY x.customer_id;


-- 2. Calculate the cumulative sales per month for each year.
SELECT 
    x.year year,
    x.month month,
    x.payment payment,
    round(sum(x.payment) OVER(ORDER BY year,month),2) cumulative
FROM
    (SELECT
        YEAR(o.order_purchase_timestamp) year ,
        MONTH(o.order_purchase_timestamp) month,
        round(sum(p.payment_value),2) payment
    FROM
        orders o 
    JOIN 
        payments p on o.order_id = p.order_id 
    GROUP BY 
        year, month
    ORDER BY
        year, month) as x;


-- 3. Calculate the year-over-year growth rate of total sales.

WITH yearly_sale AS (
    SELECT
        YEAR(o.order_purchase_timestamp) AS sales_year,
        ROUND(SUM(p.payment_value), 2) AS total_sales
    FROM 
        orders o
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY 
        sales_year
    ORDER BY
        sales_year
)
SELECT 
    sales_year,
    total_sales,
    LAG(total_sales, 1) OVER(ORDER BY sales_year) AS previous_year_sales,
    ROUND((total_sales - LAG(total_sales, 1) OVER(ORDER BY sales_year)) /
           LAG(total_sales, 1) OVER(ORDER BY sales_year) * 100, 2) AS YoY
FROM
    yearly_sale;


-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

with first_purchase AS(
    SELECT
        customer_id,
        MIN(order_purchase_timestamp) as first_date
    FROM
        orders
    GROUP BY
        customer_id
    ),
subsequent_purchase AS(
    SELECT
        o.customer_id,
        o.order_purchase_timestamp,
        fp.first_date ,
        CASE 
            WHEN o.order_purchase_timestamp > fp.first_date
                AND o.order_purchase_timestamp <= DATE_ADD(fp.first_date, INTERVAL 6 MONTH)
            THEN 1
            ELSE 0
        END AS within_6_month
    FROM
        orders o
    JOIN
        first_purchase fp ON o.customer_id = fp.customer_id
    ),
retention AS(
    SELECT 
        customer_id,
        MAX(within_6_month) AS retain
    FROM 
        subsequent_purchase
    GROUP BY 
        customer_id
    )

SELECT 
    ROUND(SUM(retain) / COUNT(*) * 100, 2) AS retention_rate
FROM 
    retention;


-- 5. Identify the top 3 customers who spent the most money in each year.
with customer_yearly_spend AS(
    SELECT
        YEAR(o.order_purchase_timestamp) AS year,
        o.customer_id AS customer_id,
        ROUND(SUM(p.payment_value),2) AS spent
    FROM
        orders o 
    JOIN 
        payments p ON o.order_id = p.order_id 
    GROUP BY 
        year,
        customer_id
    ),
ranked_customer AS (
    SELECT 
        year,
        customer_id,
        spent,
        RANK() OVER(PARTITION BY year ORDER BY spent DESC) AS spending_rank
    FROM
        customer_yearly_spend
)
SELECT 
    year,
    customer_id,
    spent,
    spending_rank
FROM 
    ranked_customer
WHERE
    spending_rank <= 3
ORDER BY 
    year,
    spending_rank;